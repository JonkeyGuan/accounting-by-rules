package com.sample.accounting;

import com.sample.accounting.domain.accounting.AccountingRule;


// ----------
rule "both->expand->businessGroup"
ruleflow-group "expand"
when
    ar: AccountingRule(category == "businessGroup")
then
    modify(ar) {
        setResult("no, na, na")
    }
    System.out.println("rule [" + drools.getRule().getName()+ "] is fired.");
end


// ----------
rule "both->expand->businessUnit"
ruleflow-group "expand"
when
    ar: AccountingRule(category == "businessUnit")
then
    modify(ar) {
        setResult("na, businessGroup, ALL")
    }
    System.out.println("rule [" + drools.getRule().getName()+ "] is fired.");
end

// ----------
rule "both->expand->product"
ruleflow-group "expand"
when
    ar: AccountingRule(category == "product")
then
    modify(ar) {
        setResult("na, businessUnit, ALL")
    }
    System.out.println("rule [" + drools.getRule().getName()+ "] is fired.");
end


// ----------
rule "both->expand->channel"
ruleflow-group "expand"
when
    ar: AccountingRule(category == "channel")
then
    modify(ar) {
        setResult("no, na, na")
    }
    System.out.println("rule [" + drools.getRule().getName()+ "] is fired.");
end


// ----------
rule "both->expand->market"
ruleflow-group "expand"
when
    ar: AccountingRule(category == "market")
then
    modify(ar) {
        setResult("na, channel, ALL")
    }
    System.out.println("rule [" + drools.getRule().getName()+ "] is fired.");
end


// ----------
rule "both->expand->buyer"
ruleflow-group "expand"
when
    ar: AccountingRule(category == "buyer")
then
    modify(ar) {
        setResult("yes, na, na")
    }
    System.out.println("rule [" + drools.getRule().getName()+ "] is fired.");
end
